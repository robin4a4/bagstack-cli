#!/usr/bin/env node
"use strict";var D=Object.defineProperty;var a=(e,t)=>D(e,"name",{value:t,configurable:!0});import R from"fs-extra";import W from"path";import c from"path";import f from"fs-extra";import v from"path";import{fileURLToPath as q}from"url";var H=q(import.meta.url),X=v.dirname(H),g=v.join(X,"../");var A="my-bagstack-app",y="bagstack-cli";import{exec as Y}from"child_process";import{promisify as Q}from"util";var p=Q(Y);var k=a(async e=>{let{packageManager:t,devMode:o,projectDir:r,packages:s}=e,h=`${t==="yarn"?`${t} add`:`${t} install`} ${o?"-D":""} ${s.join(" ")}`;await p(h,{cwd:r})},"runPkgManagerInstall");var S=a(async(e,t)=>{await k({packageManager:t,projectDir:e,packages:["prisma"],devMode:!0}),await k({packageManager:t,projectDir:e,packages:["@prisma/client"],devMode:!1});let o=c.join(g,"template/addons/prisma"),r=c.join(o,"schema.prisma"),s=c.join(e,"prisma/schema.prisma"),n=c.join(o,"client.ts"),m=c.join(e,"src/server/db/client.ts"),h=c.join(o,"sample-api.ts"),K=c.join(e,"src/pages/api/examples.ts"),P=c.join(e,"package.json"),$=f.readJSONSync(P);$.scripts.postinstall="prisma generate",await Promise.all([f.copy(r,s),f.copy(n,m),f.copy(h,K),f.writeJSON(P,$,{spaces:2})]);let B=t==="npm"?"npx prisma generate":`${t} prisma generate`;await p(B,{cwd:e})},"prismaInstaller");var T=["prisma"],_=["react","nextjs","solid","svelte","sveltekit"],C=a(e=>({prisma:{inUse:e.includes("prisma"),installer:S}}),"buildPkgInstallerMap");import I from"chalk";import{Command as V}from"commander";import x from"inquirer";import d from"chalk";var i={error(...e){console.log(d.red(...e))},warn(...e){console.log(d.yellow(...e))},info(...e){console.log(d.cyan(...e))},success(...e){console.log(d.green(...e))}};var N=a(e=>/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/.test(e)?!0:"App name must be lowercase, alphanumeric, and only use -, _, and @","validateAppName");var j={appName:A,framework:"react",packages:["prisma"]},O=a(async()=>{let e=j,t=new V().name(y);t.description("A CLI for creating web applications with the t3 stack").argument("[dir]","The name of the application, as well as the name of the directory to create").addHelpText("afterAll",`
 The t3 stack was inspired by ${I.hex("#E8DCFF").bold("@t3dotgg")} and has been used to build awesome fullstack applications like ${I.hex("#E24A8D").underline("https://ping.gg")} 
`).parse(process.argv);let o=t.args[0];o&&(e.appName=o);try{if(!o){let{appName:n}=await x.prompt({name:"appName",type:"input",message:"What will your project be called?",default:j.appName,validate:N,transformer:m=>m.trim()});e.appName=n}let{framework:r}=await x.prompt({name:"framework",type:"list",message:"Which framework would you like to use?",choices:_.map(n=>({name:n,value:n}))});e.framework=r;let{packages:s}=await x.prompt({name:"packages",type:"checkbox",message:"Which packages would you like to enable?",choices:T.map(n=>({name:n,checked:!1}))});e.packages=s}catch(r){if(r instanceof Error&&r.isTTYError)i.warn(`${y} needs an interactive terminal to provide options`),i.info(`Bootsrapping a default t3 app in ./${e.appName}`);else throw r}return e},"runCli");import oe from"path";var u=a(()=>{let e=process.env.npm_config_user_agent;return e?e.startsWith("yarn")?"yarn":e.startsWith("pnpm")?"pnpm":"npm":"npm"},"getUserPkgManager");import E from"chalk";import Z from"ora";var M=a(async(e,t,o)=>{i.info("Installing packages...");for(let[r,s]of Object.entries(o))if(s.inUse){let n=Z(`Installing ${r}...`).start();await s.installer(e,t,o),n.succeed(E.green(`Successfully installed ${E.green.bold(r)}`))}i.info("")},"installPackages");import ee from"path";import l from"chalk";import w from"fs-extra";import te from"inquirer";import ae from"ora";var G=a(async(e,t,o,r)=>{let s=ee.join(g,`template/${r}`);i.info(`
Using: ${l.cyan.bold(o)}
`);let n=ae(`Scaffolding in a ${r} project: ${t}...
`).start();if(w.existsSync(t))if(w.readdirSync(t).length===0)n.info(`${l.cyan.bold(e)} exists but is empty, continuing...
`);else{n.stopAndPersist();let{overwriteDir:m}=await te.prompt({name:"overwriteDir",type:"confirm",message:`${l.redBright.bold("Warning:")} ${l.cyan.bold(e)} already exists and isn't empty. Do you want to overwrite it?`,default:!1});m?(n.info(`Emptying ${l.cyan.bold(e)} and creating bagstack app..
`),w.emptyDirSync(t)):(n.fail("Aborting installation..."),process.exit(0))}n.start(),await w.copy(s,t),await p(`${o} install`,{cwd:t}),n.succeed(`${l.cyan.bold(e)} scaffolded successfully!
`)},"scaffoldProject");var U=a(async(e,t,o)=>{let r=u(),s=oe.resolve(process.cwd(),e);return await G(e,s,r,o),await M(s,r,t),s},"createProject");import z from"path";import b from"chalk";import re from"fs-extra";import ne from"ora";var L=a(async e=>{i.info("Initializing Git...");let t=ne(`Creating a new git repo...
`).start();try{await p("git init --initial-branch=main",{cwd:e}),t.succeed(`${b.green("Successfully initialized")} ${b.green.bold("git")}
`)}catch{t.fail(`${b.bold.red("Failed:")} could not initialize git
`)}await re.rename(z.join(e,"_gitignore"),z.join(e,".gitignore"))},"initializeGit");var F=a((e,t)=>{let o=u();i.info("Next steps:"),i.info(`  cd ${e}`),t.prisma.inUse&&i.info(`  ${o==="npm"?"npx":o} prisma db push`),i.info(`  ${o==="npm"?"npm run":o} dev`)},"logNextSteps");import ie from"figlet";import se from"gradient-string";var pe={blue:"#add7ff",cyan:"#89ddff",green:"#5de4c7",magenta:"#fae4fc",red:"#d0679d",yellow:"#fffac2"},J=a(()=>{let e=ie.textSync("BAGSTACK-CLI",{font:"Small"}),t=se(Object.values(pe));console.log(t.multiline(e))},"renderTitle");var ce=a(async()=>{J();let{appName:e,packages:t,framework:o}=await O(),r=C(t),s=await U(e,r,o);await L(s),F(e,r);let n=await R.readJSON(W.join(s,"package.json"));n.name=e,await R.writeJSON(W.join(s,"package.json"),n,{spaces:2}),process.exit(0)},"main");ce().catch(e=>{i.error("Aborting installation..."),e instanceof Error?i.error(e):(i.error("An unkown error has occured. Please open an issue on github with the below:"),console.log(e)),process.exit(1)});
//# sourceMappingURL=index.js.map