#!/usr/bin/env node
"use strict";var q=Object.defineProperty;var o=(e,t)=>q(e,"name",{value:t,configurable:!0});import W from"fs-extra";import F from"path";import p from"path";import g from"fs-extra";import A from"path";import{fileURLToPath as X}from"url";var Y=X(import.meta.url),H=A.dirname(Y),l=A.join(H,"../");var S="my-bagstack-app",h="bagstack-cli";import{exec as Q}from"child_process";import{promisify as V}from"util";var c=V(Q);var k=o(async e=>{let{packageManager:t,devMode:a,projectDir:r,packages:i}=e,y=`${t==="yarn"?`${t} add`:`${t} install`} ${a?"-D":""} ${i.join(" ")}`;await c(y,{cwd:r})},"runPkgManagerInstall");var T=o(async(e,t)=>{await k({packageManager:t,projectDir:e,packages:["prisma"],devMode:!0}),await k({packageManager:t,projectDir:e,packages:["@prisma/client"],devMode:!1});let a=p.join(l,"template/addons/prisma"),r=p.join(a,"schema.prisma"),i=p.join(e,"prisma/schema.prisma"),n=p.join(a,"client.ts"),m=p.join(e,"src/server/db/client.ts"),y=p.join(a,"sample-api.ts"),B=p.join(e,"src/pages/api/examples.ts"),v=p.join(e,"package.json"),$=g.readJSONSync(v);$.scripts.postinstall="prisma generate",await Promise.all([g.copy(r,i),g.copy(n,m),g.copy(y,B),g.writeJSON(v,$,{spaces:2})]);let D=t==="npm"?"npx prisma generate":`${t} prisma generate`;await c(D,{cwd:e})},"prismaInstaller");var _=["prisma"],C=["react","svelte"],j=o(e=>({prisma:{inUse:e.includes("prisma"),installer:T}}),"buildPkgInstallerMap");import{Command as Z}from"commander";import x from"inquirer";import d from"chalk";var s={error(...e){console.log(d.red(...e))},warn(...e){console.log(d.yellow(...e))},info(...e){console.log(d.cyan(...e))},success(...e){console.log(d.green(...e))}};var N=o(e=>/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/.test(e)?!0:"App name must be lowercase, alphanumeric, and only use -, _, and @","validateAppName");var I={appName:S,framework:"react",packages:["prisma"]},O=o(async()=>{let e=I,t=new Z().name(h);t.description("Interactive CLI to quickly set up a project, heavely inspired by create-t3-app").argument("[dir]","The name of the application, as well as the name of the directory to create").parse(process.argv);let a=t.args[0];a&&(e.appName=a);try{if(!a){let{appName:n}=await x.prompt({name:"appName",type:"input",message:"What will your project be called?",default:I.appName,validate:N,transformer:m=>m.trim()});e.appName=n}let{framework:r}=await x.prompt({name:"framework",type:"list",message:"Which framework would you like to use?",choices:C.map(n=>({name:n,value:n}))});e.framework=r;let{packages:i}=await x.prompt({name:"packages",type:"checkbox",message:"Which packages would you like to enable?",choices:_.map(n=>({name:n,checked:!1}))});e.packages=i}catch(r){if(r instanceof Error&&r.isTTYError)s.warn(`${h} needs an interactive terminal to provide options`),s.info(`Bootsrapping a default t3 app in ./${e.appName}`);else throw r}return e},"runCli");import ne from"path";var u=o(()=>{let e=process.env.npm_config_user_agent;return e?e.startsWith("yarn")?"yarn":e.startsWith("pnpm")?"pnpm":"npm":"npm"},"getUserPkgManager");import G from"chalk";import ee from"ora";var M=o(async(e,t,a)=>{s.info("Installing packages...");for(let[r,i]of Object.entries(a))if(i.inUse){let n=ee(`Installing ${r}...`).start();await i.installer(e,t,a),n.succeed(G.green(`Successfully installed ${G.green.bold(r)}`))}s.info("")},"installPackages");import te from"path";import f from"chalk";import w from"fs-extra";import oe from"inquirer";import ae from"ora";var E=o(async(e,t,a,r)=>{let i=te.join(l,`template/${r}`);s.info(`
Using: ${f.cyan.bold(a)}
`);let n=ae(`Scaffolding in a ${r} project: ${t}...
`).start();if(w.existsSync(t))if(w.readdirSync(t).length===0)n.info(`${f.cyan.bold(e)} exists but is empty, continuing...
`);else{n.stopAndPersist();let{overwriteDir:m}=await oe.prompt({name:"overwriteDir",type:"confirm",message:`${f.redBright.bold("Warning:")} ${f.cyan.bold(e)} already exists and isn't empty. Do you want to overwrite it?`,default:!1});m?(n.info(`Emptying ${f.cyan.bold(e)} and creating bagstack app..
`),w.emptyDirSync(t)):(n.fail("Aborting installation..."),process.exit(0))}n.start(),await w.copy(i,t),await c(`${a} install`,{cwd:t}),n.succeed(`${f.cyan.bold(e)} scaffolded successfully!
`)},"scaffoldProject");import b from"path";import re from"fs-extra";var U=o(async e=>{let t=b.join(l,"template/addons/tailwindcss"),a=b.join(t,"tailwind.config.js"),r=b.join(e,"/tailwind.config.js");await re.copy(a,r)},"addTailwindcssConfig");var z=o(async(e,t,a)=>{let r=u(),i=ne.resolve(process.cwd(),e);return await E(e,i,r,a),await M(i,r,t),await U(i),i},"createProject");import L from"path";import P from"chalk";import ie from"fs-extra";import se from"ora";var R=o(async e=>{s.info("Initializing Git...");let t=se(`Creating a new git repo...
`).start();try{await c("git init --initial-branch=main",{cwd:e}),t.succeed(`${P.green("Successfully initialized")} ${P.green.bold("git")}
`)}catch{t.fail(`${P.bold.red("Failed:")} could not initialize git
`)}await ie.rename(L.join(e,"_gitignore"),L.join(e,".gitignore"))},"initializeGit");var J=o((e,t)=>{let a=u();s.info("Next steps:"),s.info(`  cd ${e}`),t.prisma.inUse&&s.info(`  ${a==="npm"?"npx":a} prisma db push`),s.info(`  ${a==="npm"?"npm run":a} dev`)},"logNextSteps");import ce from"figlet";import pe from"gradient-string";var me={blue:"#add7ff",cyan:"#89ddff",green:"#5de4c7",magenta:"#fae4fc",red:"#d0679d",yellow:"#fffac2"},K=o(()=>{let e=ce.textSync("BAGSTACK-CLI",{font:"Small"}),t=pe(Object.values(me));console.log(t.multiline(e))},"renderTitle");var le=o(async()=>{K();let{appName:e,packages:t,framework:a}=await O(),r=j(t),i=await z(e,r,a);await R(i),J(e,r);let n=await W.readJSON(F.join(i,"package.json"));n.name=e,await W.writeJSON(F.join(i,"package.json"),n,{spaces:2}),process.exit(0)},"main");le().catch(e=>{s.error("Aborting installation..."),e instanceof Error?s.error(e):(s.error("An unkown error has occured. Please open an issue on github with the below:"),console.log(e)),process.exit(1)});
//# sourceMappingURL=index.js.map