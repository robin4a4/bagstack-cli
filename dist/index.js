#!/usr/bin/env node
"use strict";var X=Object.defineProperty;var o=(e,t)=>X(e,"name",{value:t,configurable:!0});import B from"fs-extra";import F from"path";import{Command as ee}from"commander";import x from"inquirer";import A from"path";import{fileURLToPath as Y}from"url";var H=Y(import.meta.url),Q=A.dirname(H),l=A.join(Q,"../");var S="my-bagstack-app",k="bagstack-cli";import m from"path";import g from"fs-extra";import{exec as V}from"child_process";import{promisify as Z}from"util";var c=Z(V);var d=o(async e=>{let{packageManager:t,devMode:a,projectDir:r,packages:n}=e,h=`${t==="yarn"?`${t} add`:`${t} install`} ${a?"-D":""} ${n.join(" ")}`;await c(h,{cwd:r})},"runPkgManagerInstall");var T=o(async(e,t)=>{await d({packageManager:t,projectDir:e,packages:["prisma"],devMode:!0}),await d({packageManager:t,projectDir:e,packages:["@prisma/client"],devMode:!1});let a=m.join(l,"template/addons/prisma"),r=m.join(a,"schema.prisma"),n=m.join(e,"prisma/schema.prisma"),i=m.join(a,"client.ts"),p=m.join(e,"src/server/db/client.ts"),h=m.join(a,"sample-api.ts"),q=m.join(e,"src/pages/api/examples.ts"),P=m.join(e,"package.json"),$=g.readJSONSync(P);$.scripts.postinstall="prisma generate",await Promise.all([g.copy(r,n),g.copy(i,p),g.copy(h,q),g.writeJSON(P,$,{spaces:2})]);let D=t==="npm"?"npx prisma generate":`${t} prisma generate`;await c(D,{cwd:e})},"prismaInstaller");var _=o(async(e,t)=>{await d({packageManager:t,projectDir:e,packages:["vitest"],devMode:!0})},"vitestInstaller");var C=["prisma","vitest"],I=["react","solid","svelte","sveltekit"],j=o(e=>({prisma:{inUse:e.includes("prisma"),installer:T},vitest:{inUse:e.includes("vitest"),installer:_}}),"buildPkgInstallerMap");import u from"chalk";var s={error(...e){console.log(u.red(...e))},warn(...e){console.log(u.yellow(...e))},info(...e){console.log(u.cyan(...e))},success(...e){console.log(u.green(...e))}};var N=o(e=>/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/.test(e)?!0:"App name must be lowercase, alphanumeric, and only use -, _, and @","validateAppName");var O={appName:S,framework:"react",packages:["prisma"]},M=o(async()=>{let e=O,t=new ee().name(k);t.description("Interactive CLI to quickly set up a project, heavely inspired by create-t3-app").argument("[dir]","The name of the application, as well as the name of the directory to create").parse(process.argv);let a=t.args[0];a&&(e.appName=a);try{if(!a){let{appName:i}=await x.prompt({name:"appName",type:"input",message:"What will your project be called?",default:O.appName,validate:N,transformer:p=>p.trim()});e.appName=i}let{framework:r}=await x.prompt({name:"framework",type:"list",message:"Which framework would you like to use?",choices:I.map(i=>({name:i,value:i}))});e.framework=r;let{packages:n}=await x.prompt({name:"packages",type:"checkbox",message:"Which packages would you like to enable?",choices:C.map(i=>({name:i,checked:!1}))});e.packages=n}catch(r){if(r instanceof Error&&r.isTTYError)s.warn(`${k} needs an interactive terminal to provide options`),s.info(`Bootsrapping a default t3 app in ./${e.appName}`);else throw r}return e},"runCli");import ne from"path";var w=o(()=>{let e=process.env.npm_config_user_agent;return e?e.startsWith("yarn")?"yarn":e.startsWith("pnpm")?"pnpm":"npm":"npm"},"getUserPkgManager");import v from"path";import te from"fs-extra";var z=o(async e=>{let t=v.join(l,"template/addons/tailwindcss"),a=v.join(t,"tailwind.config.js"),r=v.join(e,"/tailwind.config.js");await te.copy(a,r)},"addTailwindcssConfig");import G from"chalk";import oe from"ora";var U=o(async(e,t,a)=>{s.info("Installing packages...");for(let[r,n]of Object.entries(a))if(n.inUse){let i=oe(`Installing ${r}...`).start();await n.installer(e,t,a),i.succeed(G.green(`Successfully installed ${G.green.bold(r)}`))}s.info("")},"installPackages");import ae from"path";import f from"chalk";import y from"fs-extra";import re from"inquirer";import ie from"ora";var E=o(async(e,t,a,r)=>{let n=ae.join(l,`template/${r}`);s.info(`
Using: ${f.cyan.bold(a)}
`);let i=ie(`Scaffolding in a ${r} project: ${t}...
`).start();if(y.existsSync(t))if(y.readdirSync(t).length===0)i.info(`${f.cyan.bold(e)} exists but is empty, continuing...
`);else{i.stopAndPersist();let{overwriteDir:p}=await re.prompt({name:"overwriteDir",type:"confirm",message:`${f.redBright.bold("Warning:")} ${f.cyan.bold(e)} already exists and isn't empty. Do you want to overwrite it?`,default:!1});p?(i.info(`Emptying ${f.cyan.bold(e)} and creating bagstack app..
`),y.emptyDirSync(t)):(i.fail("Aborting installation..."),process.exit(0))}i.start(),await y.copy(n,t),await c(`${a} install`,{cwd:t}),i.succeed(`${f.cyan.bold(e)} scaffolded successfully!
`)},"scaffoldProject");var L=o(async(e,t,a)=>{let r=w(),n=ne.resolve(process.cwd(),e);return await E(e,n,r,a),await U(n,r,t),await z(n),n},"createProject");import R from"path";import b from"chalk";import se from"fs-extra";import ce from"ora";var J=o(async e=>{s.info("Initializing Git...");let t=ce(`Creating a new git repo...
`).start();try{await c("git init --initial-branch=main",{cwd:e}),await c("npm install commitizen",{cwd:e}),await c("commitizen init cz-conventional-changelog --save-dev --save-exact",{cwd:e}),t.succeed(`${b.green("Successfully initialized")} ${b.green.bold("git")}
`)}catch{t.fail(`${b.bold.red("Failed:")} could not initialize git
`)}await se.rename(R.join(e,"_gitignore"),R.join(e,".gitignore"))},"initializeGit");var K=o((e,t)=>{let a=w();s.info("Next steps:"),s.info(`  cd ${e}`),t.prisma.inUse&&s.info(`  ${a==="npm"?"npx":a} prisma db push`),s.info(`  ${a==="npm"?"npm run":a} dev`)},"logNextSteps");import me from"figlet";import pe from"gradient-string";var le={blue:"#add7ff",cyan:"#89ddff",green:"#5de4c7",magenta:"#fae4fc",red:"#d0679d",yellow:"#fffac2"},W=o(()=>{let e=me.textSync("BAGSTACK-CLI",{font:"Small"}),t=pe(Object.values(le));console.log(t.multiline(e))},"renderTitle");var fe=o(async()=>{W();let{appName:e,packages:t,framework:a}=await M(),r=j(t),n=await L(e,r,a);await J(n),K(e,r);let i=await B.readJSON(F.join(n,"package.json"));i.name=e,await B.writeJSON(F.join(n,"package.json"),i,{spaces:2}),process.exit(0)},"main");fe().catch(e=>{s.error("Aborting installation..."),e instanceof Error?s.error(e):(s.error("An unkown error has occured. Please open an issue on github with the below:"),console.log(e)),process.exit(1)});
//# sourceMappingURL=index.js.map