{"version":3,"sources":["../src/index.ts","../src/cli/index.ts","../src/consts.ts","../src/installers/prisma.ts","../src/utils/execAsync.ts","../src/utils/runPkgManagerInstall.ts","../src/installers/tailwind.ts","../src/installers/index.ts","../src/utils/logger.ts","../src/utils/validateAppName.ts","../src/helpers/createProject.ts","../src/utils/getUserPkgManager.ts","../src/helpers/installPackages.ts","../src/helpers/scaffoldProject.ts","../src/helpers/selectBoilerplate.ts","../src/helpers/initGit.ts","../src/helpers/logNextSteps.ts","../src/utils/renderTitle.ts"],"sourcesContent":["#!/usr/bin/env node\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport type { PackageJson } from \"type-fest\";\nimport { runCli } from \"./cli/index.js\";\nimport { createProject } from \"./helpers/createProject.js\";\nimport { initializeGit } from \"./helpers/initGit.js\";\nimport { logNextSteps } from \"./helpers/logNextSteps.js\";\nimport { buildPkgInstallerMap } from \"./installers/index.js\";\nimport { logger } from \"./utils/logger.js\";\nimport { renderTitle } from \"./utils/renderTitle.js\";\n\nconst main = async () => {\n  renderTitle();\n\n  // TEMPORARY WARNING WHEN USING NODE 18. SEE ISSUE #59\n  if (process.versions.node.startsWith(\"18\")) {\n    logger.warn(`  WARNING: You are using Node.js version 18. This is currently not compatible with Next-Auth.\n  If you want to use Next-Auth, switch to a previous version of Node, e.g. 16 (LTS).\n  If you have nvm installed, use 'nvm install --lts' to switch to the latest LTS version of Node.\n    `);\n  }\n\n  const { appName, packages } = await runCli();\n\n  const usePackages = buildPkgInstallerMap(packages);\n\n  const projectDir = await createProject(appName, usePackages);\n\n  await initializeGit(projectDir);\n\n  logNextSteps(appName, usePackages);\n\n  const pkgJson = (await fs.readJSON(\n    path.join(projectDir, \"package.json\")\n  )) as PackageJson;\n  pkgJson.name = appName;\n  await fs.writeJSON(path.join(projectDir, \"package.json\"), pkgJson, {\n    spaces: 2,\n  });\n\n  process.exit(0);\n};\n\nmain().catch((err) => {\n  logger.error(\"Aborting installation...\");\n  if (err instanceof Error) {\n    logger.error(err);\n  } else {\n    logger.error(\n      \"An unkown error has occured. Please open an issue on github with the below:\"\n    );\n    console.log(err);\n  }\n  process.exit(1);\n});\n","import type { AvailablePackages } from \"../installers/index.js\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport inquirer from \"inquirer\";\nimport { BAGSTACK_CLI, DEFAULT_APP_NAME } from \"../consts.js\";\nimport { availablePackages } from \"../installers/index.js\";\nimport { logger } from \"../utils/logger.js\";\nimport { validateAppName } from \"../utils/validateAppName.js\";\n\ninterface CliResults {\n  appName: string;\n  packages: AvailablePackages[];\n}\n\nconst defaultOptions: CliResults = {\n  appName: DEFAULT_APP_NAME,\n  packages: [\"prisma\", \"tailwind\"],\n};\n\nexport const runCli = async () => {\n  const cliResults = defaultOptions;\n\n  const program = new Command().name(BAGSTACK_CLI);\n\n  program\n    .description(\"A CLI for creating web applications with the t3 stack\")\n    .argument(\n      \"[dir]\",\n      \"The name of the application, as well as the name of the directory to create\"\n    )\n    .addHelpText(\n      \"afterAll\",\n      `\\n The t3 stack was inspired by ${chalk\n        .hex(\"#E8DCFF\")\n        .bold(\n          \"@t3dotgg\"\n        )} and has been used to build awesome fullstack applications like ${chalk\n        .hex(\"#E24A8D\")\n        .underline(\"https://ping.gg\")} \\n`\n    )\n    .parse(process.argv);\n\n  // Needs to be seperated outside the if statement to correctly infer the type as string | undefined\n  const cliProvidedName = program.args[0];\n  if (cliProvidedName) {\n    cliResults.appName = cliProvidedName;\n  }\n\n  // Explained below why this is in a try/catch block\n  try {\n    if (!cliProvidedName) {\n      const { appName } = await inquirer.prompt<Pick<CliResults, \"appName\">>({\n        name: \"appName\",\n        type: \"input\",\n        message: \"What will your project be called?\",\n        default: defaultOptions.appName,\n        validate: validateAppName,\n        transformer: (input: string) => {\n          return input.trim();\n        },\n      });\n      cliResults.appName = appName;\n    }\n\n    const { packages } = await inquirer.prompt<Pick<CliResults, \"packages\">>({\n      name: \"packages\",\n      type: \"checkbox\",\n      message: \"Which packages would you like to enable?\",\n      choices: availablePackages.map((pkgName) => ({\n        name: pkgName,\n        checked: false,\n      })),\n    });\n\n    cliResults.packages = packages;\n  } catch (err) {\n    // If the user is not calling create-t3-app from an interactive terminal, inquirer will throw an error with isTTYError = true\n    // If this happens, we catch the error, tell the user what has happened, and then contiue to run the program with a default t3 app\n    // eslint-disable-next-line -- Otherwise we have to do some fancy namespace extension logic on the Error type which feels overkill for one line\n    if (err instanceof Error && (err as any).isTTYError) {\n      logger.warn(\n        `${BAGSTACK_CLI} needs an interactive terminal to provide options`\n      );\n      logger.info(`Bootsrapping a default t3 app in ./${cliResults.appName}`);\n    } else {\n      throw err;\n    }\n  }\n\n  return cliResults;\n};\n","import path from \"path\";\nimport { fileURLToPath } from \"url\";\n\n// With the move to TSUP as a build tool, this keeps path routes in other files (installers, loaders, etc) in check more easily.\n// Path is in relation to a single index.js file inside ./dist\nconst __filename = fileURLToPath(import.meta.url);\nconst distPath = path.dirname(__filename);\nexport const PKG_ROOT = path.join(distPath, \"../\");\n\n//export const PKG_ROOT = path.dirname(require.main.filename);\n\nexport const TITLE_TEXT = `Welcome to the bagstack-cli !`;\nexport const DEFAULT_APP_NAME = \"my-bagstack-app\";\nexport const BAGSTACK_CLI = \"bagstack-cli\";\n","import type { Installer } from \"./index.js\";\nimport type { PackageJson } from \"type-fest\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"../consts.js\";\nimport { execa } from \"../utils/execAsync.js\";\nimport { runPkgManagerInstall } from \"../utils/runPkgManagerInstall.js\";\n\nexport const prismaInstaller: Installer = async (\n  projectDir,\n  packageManager\n) => {\n  await runPkgManagerInstall({\n    packageManager,\n    projectDir,\n    packages: [\"prisma\"],\n    devMode: true,\n  });\n  await runPkgManagerInstall({\n    packageManager,\n    projectDir,\n    packages: [\"@prisma/client\"],\n    devMode: false,\n  });\n\n  const prismaAssetDir = path.join(PKG_ROOT, \"template/addons/prisma\");\n\n  const schemaSrc = path.join(prismaAssetDir, \"schema.prisma\");\n  const schemaDest = path.join(projectDir, \"prisma/schema.prisma\");\n\n  const clientSrc = path.join(prismaAssetDir, \"client.ts\");\n  const clientDest = path.join(projectDir, \"src/server/db/client.ts\");\n\n  const sampleApiRouteSrc = path.join(prismaAssetDir, \"sample-api.ts\");\n  const sampleApiRouteDest = path.join(projectDir, \"src/pages/api/examples.ts\");\n\n  // add postinstall script to package.json\n  const packageJsonPath = path.join(projectDir, \"package.json\");\n\n  const packageJsonContent = fs.readJSONSync(packageJsonPath) as PackageJson;\n  packageJsonContent.scripts!.postinstall = \"prisma generate\"; //eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n  await Promise.all([\n    fs.copy(schemaSrc, schemaDest),\n    fs.copy(clientSrc, clientDest),\n    fs.copy(sampleApiRouteSrc, sampleApiRouteDest),\n    fs.writeJSON(packageJsonPath, packageJsonContent, {\n      spaces: 2,\n    }),\n  ]);\n\n  const generateClientCmd =\n    packageManager === \"npm\"\n      ? \"npx prisma generate\"\n      : `${packageManager} prisma generate`;\n  await execa(generateClientCmd, { cwd: projectDir });\n};\n","import { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nexport const execa = promisify(exec);\n","import type { PackageManager } from \"./getUserPkgManager.js\";\nimport { execa } from \"./execAsync.js\";\n\nexport const runPkgManagerInstall = async (opts: {\n  packageManager: PackageManager;\n  devMode: boolean;\n  projectDir: string;\n  packages: string[];\n}) => {\n  const { packageManager, devMode, projectDir, packages } = opts;\n\n  const installCmd =\n    packageManager === \"yarn\"\n      ? `${packageManager} add`\n      : `${packageManager} install`;\n  const flag = devMode ? \"-D\" : \"\";\n  const fullCmd = `${installCmd} ${flag} ${packages.join(\" \")}`;\n  await execa(fullCmd, { cwd: projectDir });\n};\n","import type { Installer } from \"./index.js\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"../consts.js\";\nimport { runPkgManagerInstall } from \"../utils/runPkgManagerInstall.js\";\n\nexport const tailwindInstaller: Installer = async (\n  projectDir,\n  packageManager,\n) => {\n  await runPkgManagerInstall({\n    packageManager,\n    projectDir,\n    packages: [\"tailwindcss\", \"postcss\", \"autoprefixer\"],\n    devMode: true,\n  });\n\n  const twAssetDir = path.join(PKG_ROOT, \"template/addons/tailwind\");\n\n  const twCfgSrc = path.join(twAssetDir, \"tailwind.config.js\");\n  const twCfgDest = path.join(projectDir, \"tailwind.config.js\");\n\n  const postcssCfgSrc = path.join(twAssetDir, \"postcss.config.js\");\n  const postcssCfgDest = path.join(projectDir, \"postcss.config.js\");\n\n  const cssSrc = path.join(twAssetDir, \"globals.css\");\n  const cssDest = path.join(projectDir, \"src/styles/globals.css\");\n\n  await Promise.all([\n    fs.copy(twCfgSrc, twCfgDest),\n    fs.copy(postcssCfgSrc, postcssCfgDest),\n    fs.copy(cssSrc, cssDest),\n  ]);\n};\n","import type { PackageManager } from \"../utils/getUserPkgManager.js\";\n\nimport { prismaInstaller } from \"./prisma.js\";\nimport { tailwindInstaller } from \"./tailwind.js\";\n\n// Turning this into a const allows the list to be iterated over for programatically creating prompt options\n// Should increase extensability in the future\nexport const availablePackages = [\"prisma\", \"tailwind\"] as const;\n\nexport type AvailablePackages = typeof availablePackages[number];\n\nexport type Installer = (\n  projectDir: string,\n  packageManager: PackageManager,\n  packages: PkgInstallerMap\n) => Promise<void>;\n\nexport type PkgInstallerMap = {\n  [pkg in AvailablePackages]: {\n    inUse: boolean;\n    installer: Installer;\n  };\n};\n\nexport const buildPkgInstallerMap = (\n  packages: AvailablePackages[]\n): PkgInstallerMap => ({\n  prisma: {\n    inUse: packages.includes(\"prisma\"),\n    installer: prismaInstaller,\n  },\n  tailwind: {\n    inUse: packages.includes(\"tailwind\"),\n    installer: tailwindInstaller,\n  },\n});\n","import chalk from \"chalk\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n};\n","//Validate a string against allowed package.json names\nexport const validateAppName = (input: string) => {\n  if (\n    /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$/.test(input)\n  ) {\n    return true;\n  } else {\n    return \"App name must be lowercase, alphanumeric, and only use -, _, and @\";\n  }\n};\n","import type { PkgInstallerMap } from \"../installers/index.js\";\nimport path from \"path\";\nimport { getUserPkgManager } from \"../utils/getUserPkgManager.js\";\nimport { installPackages } from \"./installPackages.js\";\nimport { scaffoldProject } from \"./scaffoldProject.js\";\nimport { selectAppFile, selectIndexFile } from \"./selectBoilerplate.js\";\n\nexport const createProject = async (\n  projectName: string,\n  packages: PkgInstallerMap\n) => {\n  const pkgManager = getUserPkgManager();\n  const projectDir = path.resolve(process.cwd(), projectName);\n\n  // Bootstraps the base Next.js application\n  await scaffoldProject(projectName, projectDir, pkgManager);\n\n  // Install the selected packages\n  await installPackages(projectDir, pkgManager, packages);\n\n  await selectIndexFile(projectDir);\n\n  return projectDir;\n};\n","export type PackageManager = \"npm\" | \"pnpm\" | \"yarn\";\n\nexport const getUserPkgManager: () => PackageManager = () => {\n  // This environment variable is set by npm and yarn but pnpm seems less consistent\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent) {\n    if (userAgent.startsWith(\"yarn\")) {\n      return \"yarn\";\n    } else if (userAgent.startsWith(\"pnpm\")) {\n      return \"pnpm\";\n    } else {\n      return \"npm\";\n    }\n  } else {\n    // If no user agent is set, assume npm\n    return \"npm\";\n  }\n};\n","import type { PkgInstallerMap } from \"../installers/index.js\";\nimport type { PackageManager } from \"../utils/getUserPkgManager.js\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport { logger } from \"../utils/logger.js\";\n\n// This runs the installer for all the packages that the user has selected\nexport const installPackages = async (\n  projectDir: string,\n  pkgManager: PackageManager,\n  packages: PkgInstallerMap\n) => {\n  logger.info(\"Installing packages...\");\n\n  for (const [name, opts] of Object.entries(packages)) {\n    console.log(opts);\n    if (opts.inUse) {\n      const spinner = ora(`Installing ${name}...`).start();\n      await opts.installer(projectDir, pkgManager, packages);\n      spinner.succeed(\n        chalk.green(`Successfully installed ${chalk.green.bold(name)}`)\n      );\n    }\n  }\n  logger.info(\"\");\n};\n","import path from \"path\";\nimport chalk from \"chalk\";\nimport fs from \"fs-extra\";\nimport inquirer from \"inquirer\";\nimport ora from \"ora\";\nimport { PKG_ROOT } from \"../consts.js\";\nimport { execa } from \"../utils/execAsync.js\";\nimport { type PackageManager } from \"../utils/getUserPkgManager.js\";\nimport { logger } from \"../utils/logger.js\";\n\n// This bootstraps the base Next.js application\nexport const scaffoldProject = async (\n  projectName: string,\n  projectDir: string,\n  pkgManager: PackageManager\n) => {\n  const srcDir = path.join(PKG_ROOT, \"template/base\");\n\n  logger.info(`\\nUsing: ${chalk.cyan.bold(pkgManager)}\\n`);\n  const spinner = ora(`Scaffolding in: ${projectDir}...\\n`).start();\n\n  if (fs.existsSync(projectDir)) {\n    if (fs.readdirSync(projectDir).length === 0) {\n      spinner.info(\n        `${chalk.cyan.bold(projectName)} exists but is empty, continuing...\\n`\n      );\n    } else {\n      spinner.stopAndPersist();\n      const { overwriteDir } = await inquirer.prompt<{ overwriteDir: boolean }>(\n        {\n          name: \"overwriteDir\",\n          type: \"confirm\",\n          message: `${chalk.redBright.bold(\"Warning:\")} ${chalk.cyan.bold(\n            projectName\n          )} already exists and isn't empty. Do you want to overwrite it?`,\n          default: false,\n        }\n      );\n      if (!overwriteDir) {\n        spinner.fail(\"Aborting installation...\");\n        process.exit(0);\n      } else {\n        spinner.info(\n          `Emptying ${chalk.cyan.bold(\n            projectName\n          )} and creating bagstack app..\\n`\n        );\n        fs.emptyDirSync(projectDir);\n      }\n    }\n  }\n\n  spinner.start();\n\n  await fs.copy(srcDir, projectDir);\n\n  await execa(`${pkgManager} install`, { cwd: projectDir });\n\n  spinner.succeed(`${chalk.cyan.bold(projectName)} scaffolded successfully!\\n`);\n};\n","import path from \"path\";\nimport fs from \"fs-extra\";\nimport { PKG_ROOT } from \"../consts.js\";\n\n// This generates the _app.tsx file that is used to render the app\nexport const selectAppFile = async (projectDir: string) => {\n  const appFileDir = path.join(PKG_ROOT, \"template/page-studs/_app\");\n  const appDest = path.join(projectDir, \"src/pages/_app.tsx\");\n  await fs.copy(appFileDir, appDest);\n};\n\n// This selects the proper index.tsx to be used that showcases the chosen tech\nexport const selectIndexFile = async (projectDir: string) => {\n  const indexFileDir = path.join(PKG_ROOT, \"template/page-studs/index\");\n\n  const indexSrc = path.join(indexFileDir, \"with-tw.tsx\");\n  const indexDest = path.join(projectDir, \"src/pages/index.tsx\");\n  await fs.copy(indexSrc, indexDest);\n};\n","import path from \"path\";\nimport chalk from \"chalk\";\nimport fs from \"fs-extra\";\nimport ora from \"ora\";\nimport { execa } from \"../utils/execAsync.js\";\nimport { logger } from \"../utils/logger.js\";\n\n// This initializes the Git-repository for the project\nexport const initializeGit = async (projectDir: string) => {\n  logger.info(\"Initializing Git...\");\n  const spinner = ora(\"Creating a new git repo...\\n\").start();\n  try {\n    await execa(\"git init --initial-branch=main\", { cwd: projectDir });\n    spinner.succeed(\n      `${chalk.green(\"Successfully initialized\")} ${chalk.green.bold(\"git\")}\\n`,\n    );\n  } catch (error) {\n    spinner.fail(`${chalk.bold.red(\"Failed:\")} could not initialize git\\n`);\n  }\n\n  await fs.rename(\n    path.join(projectDir, \"_gitignore\"),\n    path.join(projectDir, \".gitignore\"),\n  );\n};\n","import type { PkgInstallerMap } from \"../installers/index.js\";\nimport { getUserPkgManager } from \"../utils/getUserPkgManager.js\";\nimport { logger } from \"../utils/logger.js\";\n\n// This logs the next steps that the user should take in order to advance the project\nexport const logNextSteps = (\n  projectName: string,\n  packages: PkgInstallerMap,\n) => {\n  const pkgManager = getUserPkgManager();\n\n  logger.info(\"Next steps:\");\n  logger.info(`  cd ${projectName}`);\n\n  if (packages.prisma.inUse) {\n    logger.info(\n      `  ${pkgManager === \"npm\" ? \"npx\" : pkgManager} prisma db push`,\n    );\n  }\n\n  logger.info(`  ${pkgManager === \"npm\" ? \"npm run\" : pkgManager} dev`);\n};\n","import figlet from \"figlet\";\nimport gradient from \"gradient-string\";\n\n// colors brought in from vscode poimandres theme\nconst poimandresTheme = {\n  blue: \"#add7ff\",\n  cyan: \"#89ddff\",\n  green: \"#5de4c7\",\n  magenta: \"#fae4fc\",\n  red: \"#d0679d\",\n  yellow: \"#fffac2\",\n};\n\nexport const renderTitle = () => {\n  const text = figlet.textSync(\"BAGSTACK-CLI\", { font: \"Small\" });\n  const cliGradient = gradient(Object.values(poimandresTheme));\n  console.log(cliGradient.multiline(text));\n};\n"],"mappings":"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","names":[]}